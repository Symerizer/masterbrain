<!DOCTYPE html>
<html>
  <head>
    <title>New Ember-Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
    <%- body %>

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/sails.io.js"></script>
    <script src="/js/dependencies/jquery/dist/jquery.js"></script>
    <script src="/js/dependencies/handlebars/handlebars.js"></script>
    <script src="/js/dependencies/ember/ember.js"></script>
    <script src="/js/dependencies/ember-data/ember-data.js"></script>
    <script src="/js/dependencies/ember-data-sails-adapter/ember-data-sails-adapter.js"></script>
    <script src="/js/dependencies/jquery-mousewheel/jquery.mousewheel.js"></script>
    <script src="/js/dependencies/jquery.jscrollpane/jquery.jscrollpane.min.js"></script>
    <script src="/js/application.js"></script>
    <script src="/js/store.js"></script>
    <script src="/js/app/controllers/BattlesController.js"></script>
    <script src="/js/app/controllers/ChatsController.js"></script>
    <script src="/js/app/controllers/SystemsController.js"></script>
    <script src="/js/app/controllers/UsersController.js"></script>
    <script src="/js/app/models/System.js"></script>
    <script src="/js/app/models/User.js"></script>
    <script src="/js/app/objects/Animation.js"></script>
    <script src="/js/app/objects/Hexagon.js"></script>
    <script src="/js/app/objects/Map.js"></script>
    <script src="/js/app/objects/PlanetarySystem/Planet.js"></script>
    <script src="/js/app/objects/PlanetarySystem/Star.js"></script>
    <script src="/js/app/objects/SocketAdapter.js"></script>
    <script src="/js/app/router.js"></script>
    <script src="/js/app/routes/BattlesRoute.js"></script>
    <script src="/js/app/routes/ChatRoute.js"></script>
    <script src="/js/app/routes/SystemsRoute.js"></script>
    <script src="/js/app/routes/UsersRoute.js"></script>
    <script src="/js/app/views/BattlesView.js"></script>
    <script src="/js/app/views/ChatsView.js"></script>
    <script src="/js/app/views/SystemsView.js"></script>
    <!--SCRIPTS END-->

    <!--
          Client-side Templates
          ========================

          HTML templates are important prerequisites of modern, rich client applications.
          To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
          that you load these templates client-side.

          By default, your Gruntfile is configured to automatically load and precompile
          client-side JST templates in your `assets/templates` folder, then
          include them here automatically (between TEMPLATES and TEMPLATES END).

          To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
          For example, here are a few things you could do:

              + Import templates from other directories
              + Use a different template engine (handlebars, jade, dust, etc.)
              + Internationalize your client-side templates using a server-side
                stringfile before they're served.
      -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/template.js"></script>
    <!--TEMPLATES END-->
  </body>
</html>
